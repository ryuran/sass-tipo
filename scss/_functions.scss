/// Suppresion de l’unité
///
/// @param {Number} $tipo-number - variable (avec ou sans unité)
///
/// @return {Number} variable sans unité retournée.
@function tipo-strip-unit($tipo-number) {
  @return $tipo-number / ($tipo-number * 0 + 1);
}

/// Convert pixels to ems
///
/// @param {Number (px)} $tipo-px - size in pixels
/// @param {Number (px)} $tipo-context [$tipo-fs0] - context in pixels
///
/// @return {Number (em)} équivalence en `ems` retournée.
@function tipo-em($tipo-px, $tipo-context: $tipo-fs0) {
  @return(tipo-strip-unit($tipo-px) / tipo-strip-unit($tipo-context) * 1em);
}

/// Convert pixels to points
///
/// @param {Number (px)} $tipo-px - size in pixels
///
/// @return {Number (pt)} équivalence en points retournée.
@function tipo-pt($tipo-px) {
  @return(tipo-strip-unit($tipo-px) * map-get($tipo-ratios, fourth)  * 1pt);
}

/// Convert pixels to rems
///
/// @param {Number (px)} $tipo-px - size in pixels
///
/// @return {Number (rem)} équivalence en `rems` retournée.
@function tipo-rem($tipo-px) {
  @return(tipo-strip-unit($tipo-px) / tipo-strip-unit($tipo-bfs) * 1rem);
}

/// Convert pixels to percentages
///
/// @param {} $tipo-px - variable en pixels passée en paramètre
/// @param {} $tipo-context [$tipo-fs0] - context in pixels
///
/// @return {Number (%)} équivalence en pourcentage retournée.
@function tipo-pourcent($tipo-px, $tipo-context: $tipo-fs0) {
  @return(tipo-strip-unit($tipo-px) * 100 / tipo-strip-unit($tipo-context) * 1%);
}

/// Calcul de taille dans l’unité de son choix
///
/// @param {Number (px)} $tipo-px - variable en pixels passée en paramètre
/// @param {String} $tipo-unit - unité choisie (par défaut égale à l’unité préférée du projet)
/// @param {Number (px)} $tipo-context - context de travail en pixels (par défaut égal à la taille de texte du projet)
///
/// @return {Number (unit)} taille en `em`, en `rem`, en `pt`, en `%` ou en `px` en fonction de `$tipo-unit`.
@function tipo-size($tipo-px, $tipo-unit: $tipo-default-unit, $tipo-context: $tipo-fs0) {
  @if $tipo-unit == 'em' {
    @return tipo-em($tipo-px, $tipo-context);
  }
  @elseif $tipo-unit == 'rem' {
    @return tipo-rem($tipo-px);
  }
  @elseif $tipo-unit == 'pt' {
    @return tipo-pt($tipo-px);
  }
  @elseif $tipo-unit == 'pourcent' {
    @if $tipo-context == $tipo-fs0 or $tipo-context == null {
      $tipo-context: tipo-grid-cols-width($tipo-cols-desktop);
    }

    @return (tipo-strip-unit($tipo-px) * 100 / tipo-strip-unit($tipo-context) * 1%);
  }
  @else {
    @return $tipo-px;
  }
}


/// Calculer le nombre de lignes nécessaires
///
/// @param {Number (px)} $tipo-font-size - taille du texte en pixels passée en paramètre
/// @param {Number (px)} $tipo-line-height - hauteur de ligne
///
/// @return {Number} nombre de lignes nécessaires pour afficher.
@function tipo-lines($tipo-font-size, $tipo-line-height: $tipo-lh) {
  $tipo-lines: ceil(2 * $tipo-font-size / $tipo-line-height) / 2;
  $tipo-gap: 2px;

  @if ($tipo-lines * $tipo-line-height - $tipo-font-size) < $tipo-gap {
    $tipo-lines: $tipo-lines + 0.5;
  }

  @return $tipo-lines;
}

/// Fournir une taille issue de l’échelle typographique
///
/// @param {Number} $tipo-level - niveau demandé sur l’échelle typographique (passé en paramètre) (par défaut égal à 0)
///
/// @return {Number (px)} taille en pixels.
@function tipo-scale($tipo-level: 0) {
  $tipo-start: nth($tipo-scale1, $tipo-amplitude + 1);

  @return nth($tipo-scale, index($tipo-scale, $tipo-start) + $tipo-level + $tipo-offset);
}


/// Remove duplicates entries in a list
///
/// @return {List} list whitout duplicate entry
@function tipo-uniq($list) {
  $uniq-list: ();

  @each $item in $list {
    @if not index($uniq-list, $item) {
      $uniq-list: append($uniq-list, $item, list-separator($list));
    }
  }

  @return $uniq-list;
}

/// Sort a list (of number)
///
/// @return {List} sorted list
@function tipo-sort($list) {
  $less:  ();
  $equal: ();
  $large: ();

  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2));

    @each $item in $list {
      @if ($item == $seed) {
        $equal: append($equal, $item);
      } @else if ($item < $seed) {
        $less: append($less, $item);
      } @else if ($item > $seed) {
        $large: append($large, $item);
      }
    }

    @return join(join(tipo-sort($less), $equal), tipo-sort($large));
  }

  @return $list;
}
