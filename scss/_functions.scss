/// Remove unit of a value
///
/// @param {Number} $tipo-number - variable (with or without unit)
///
/// @return {Number} variable without unit.
@function tipo-strip-unit($tipo-number) {
  @return $tipo-number / ($tipo-number * 0 + 1);
}

/// Convert pixels to ems
///
/// @param {Number (px)} $tipo-px - size in pixels
/// @param {Number (px)} $tipo-context [$tipo-fs0] - context in pixels
///
/// @return {Number (em)} value in `em`
@function tipo-em($tipo-px, $tipo-context: $tipo-fs0) {
  @return(tipo-strip-unit($tipo-px) / tipo-strip-unit($tipo-context) * 1em);
}

/// Convert pixels to points
///
/// @param {Number (px)} $tipo-px - size in pixels
///
/// @return {Number (pt)} value in `pt`.
@function tipo-pt($tipo-px) {
  @return(tipo-strip-unit($tipo-px) * map-get($tipo-ratios, fourth)  * 1pt);
}

/// Convert pixels to rems
///
/// @param {Number (px)} $tipo-px - size in pixels
///
/// @return {Number (rem)} value in `rem`
@function tipo-rem($tipo-px) {
  @return(tipo-strip-unit($tipo-px) / tipo-strip-unit($tipo-bfs) * 1rem);
}

/// Convert pixels to percentages
///
/// @param {} $tipo-px - size in pixels
/// @param {} $tipo-context [$tipo-fs0] - context in pixels
///
/// @return {Number (%)} value in `%`
@function tipo-pourcent($tipo-px, $tipo-context: $tipo-fs0) {
  @return(tipo-strip-unit($tipo-px) * 100 / tipo-strip-unit($tipo-context) * 1%);
}

/// Size calculation in the choosen unit
///
/// @param {Number (px)} $tipo-px - size in pixels
/// @param {String} $tipo-unit [$tipo-default-unit] - choosen unit
/// @param {Number (px)} $tipo-context [$tipo-fs0] - context in pixels
///
/// @return {Number (unit)} Size in `em`, `rem`, `pt`, `%` or `px` depending on `$tipo-unit`
@function tipo-size($tipo-px, $tipo-unit: $tipo-default-unit, $tipo-context: $tipo-fs0) {
  @if $tipo-unit == 'em' {
    @return tipo-em($tipo-px, $tipo-context);
  }
  @elseif $tipo-unit == 'rem' {
    @return tipo-rem($tipo-px);
  }
  @elseif $tipo-unit == 'pt' {
    @return tipo-pt($tipo-px);
  }
  @elseif $tipo-unit == 'pourcent' {
    @if $tipo-context == $tipo-fs0 or $tipo-context == null {
      $tipo-context: tipo-grid-cols-width($tipo-cols-desktop);
    }

    @return (tipo-strip-unit($tipo-px) * 100 / tipo-strip-unit($tipo-context) * 1%);
  }
  @else {
    @return $tipo-px;
  }
}


/// Number of line calculation
///
/// @param {Number (px)} $tipo-font-size - size in `px`
/// @param {Number (px)} $tipo-line-height - line height
///
/// @return {Number} number of line needed by the font size
@function tipo-lines($tipo-font-size, $tipo-line-height: $tipo-lh) {
  $tipo-lines: ceil(2 * $tipo-font-size / $tipo-line-height) / 2;

  // TODO: variable in config for O.5 adjustment $tipo-gap of line-height
  $tipo-gap: 2px;

  @if ($tipo-lines * $tipo-line-height - $tipo-font-size) < $tipo-gap {
    // TODO: variable in config for O.5 adjustment
    $tipo-lines: $tipo-lines + 0.5;
  }

  @return $tipo-lines;
}

/// Get a size from the typographic scale
///
/// @param {Number} $tipo-level [0] - level of typographic scale asked
///
/// @return {Number (px)} size in `px`
@function tipo-scale($tipo-level: 0) {
  $tipo-start: nth($tipo-scale1, $tipo-amplitude + 1);

  @return nth($tipo-scale, index($tipo-scale, $tipo-start) + $tipo-level + $tipo-offset);
}


/// Remove duplicated entries in a list
///
/// @param {List} $list - a list
///
/// @return {List} list whitout duplicated entry
@function tipo-uniq($list) {
  $uniq-list: ();

  @each $item in $list {
    @if not index($uniq-list, $item) {
      $uniq-list: append($uniq-list, $item, list-separator($list));
    }
  }

  @return $uniq-list;
}

/// Sort a list (of number)
///
/// @param {List} $list - list to sort
///
/// @return {List} sorted list
@function tipo-sort($list) {
  $less:  ();
  $equal: ();
  $large: ();

  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2));

    @each $item in $list {
      @if ($item == $seed) {
        $equal: append($equal, $item);
      } @else if ($item < $seed) {
        $less: append($less, $item);
      } @else if ($item > $seed) {
        $large: append($large, $item);
      }
    }

    @return join(join(tipo-sort($less), $equal), tipo-sort($large));
  }

  @return $list;
}
